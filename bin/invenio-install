#!/bin/bash
#
# Install Invenio using virtualenv and workdir
#
# See http://invenio-software.org/wiki/Installation/InvenioInVirtualenv
# for more information about virtualevn and Invenio
#
# See https://github.com/git/git/tree/master/contrib/workdir for more
# information about workdir

bold=`tput bold`
normal=`tput sgr0`

CONFIRM=0
APACHE=1

HELP="Try '$0 --help' for more information"
FULL_HELP="Usage: invenio-install [option] virtualenv_name
Install Invenio using virtualenv and workdir.

 -h, --help
     --yes-i-know
     --runserver    Indicates if the apache configurarion files should be 
                    created. (By default they are)
"

####################
# Helper functions #
####################
which_ok() {
    which $1 &>/dev/null && echo 'ok' || ( echo 'fail'; exit 1 )
}

check_correct_cfgs(){
    if [ $CONFIRM -eq 0 ]; then
        read -e -p  " Is that correct? [y,N] (exit ^c) " input
        if [[ $input == "" || $input == "Y" || $input == "y" ]]; then
            echo " >>> Moving ahead!"
        else
            for cfg in "$@"
            do
                value=${!cfg}
                read -e -p "  >>> New value for $cfg: [$value] "  new_value
                [ -n "$new_value" ] && eval $cfg=$new_value
            done
        fi
    fi
}


##################################
# Step 0: Parse script variables #
##################################
PARSED_OPTIONS=$(getopt -n "$0"  -o h --long "help,yes-i-know,runserver"  -- "$@")

#Bad arguments
if [ $? -ne 0 ];
then
    echo "$HELP"
    exit 1
fi
if [ "$PARSED_OPTIONS" == " --" ];
then
    echo "$0: missing operand"
    echo "$HELP"
    exit 1
fi

# A little magic, necessary when using getopt.
eval set -- "$PARSED_OPTIONS"

while true;
do
    case "$1" in
        -h|--help)
            echo "$FULL_HELP"
            exit 0;;
        --yes-i-know)
            CONFIRM=1
            shift;;
        --runserver)
            APACHE=0
            shift;;
        --)
            shift
            break;;
    esac
done

shift $(($OPTIND - 1))
CFG_INVENIO_VIRTUALENV_NAME=$1

###########################
# Configuration variables #
###########################
MYSQL_ADMIN_USER=${MYSQL_ADMIN_USER:=root}
MYSQL_ADMIN_PASS=${MYSQL_ADMIN_PASS:=pass}

CFG_INVENIO_VIRTUALENVS=${CFG_INVENIO_VIRTUALENVS:=${WORKON_HOME:=$HOME/.virtualenvs}}
CFG_INVENIO_PREFIX=${CFG_INVENIO_PREFIX:=${CFG_INVENIO_VIRTUALENVS}/${CFG_INVENIO_VIRTUALENV_NAME}}
CFG_INVENIO_SRCDIR_ORIG=${CFG_INVENIO_SRCDIR_ORIG:=~/src/invenio}
CFG_INVENIO_SRCDIR=${CFG_INVENIO_SRCDIR:=${CFG_INVENIO_PREFIX}/src/invenio}
CFG_INVENIO_HOSTNAME=${CFG_INVENIO_HOSTNAME:=`hostname`}
CFG_INVENIO_DOMAINNAME=${CFG_INVENIO_DOMAINNAME:=`domainname`}
CFG_INVENIO_PORT_HTTP=${CFG_INVENIO_PORT_HTTP:=80}
CFG_INVENIO_PORT_HTTPS=${CFG_INVENIO_PORT_HTTPS:=443}
CFG_INVENIO_USER=${CFG_INVENIO_USER:=`whoami`}
CFG_INVENIO_ADMIN=${CFG_INVENIO_ADMIN:=info@invenio-software.org}
CFG_INVENIO_DATABASE_NAME=${CFG_INVENIO_DATABASE_NAME:=${CFG_INVENIO_VIRTUALENV_NAME}}
CFG_INVENIO_DATABASE_USER=${CFG_INVENIO_DATABASE_USER:=invenio}
CFG_INVENIO_DATABASE_PASS=${CFG_INVENIO_DATABASE_PASS:='my123p$ass'}
if [ `uname` == "Darwin" ]
then
  CFG_INVENIO_APACHECTL=${CFG_INVENIO_APACHECTL:=apachectl}
  CFG_INVENIO_MYSQLCTL=${CFG_INVENIO_MYSQLCTL:=mysql.server}
else
  CFG_INVENIO_APACHECTL=${CFG_INVENIO_APACHECTL:=sudo /etc/init.d/apache2}
  CFG_INVENIO_MYSQLCTL=${CFG_INVENIO_MYSQLCTL:=sudo /etc/init.d/mysql}
fi
CFG_TMP=/tmp/deploy.$$

#TODO: Check if Invenio is in next

#####################################
# Step 1: Check directory variables #
#####################################
echo " ${bold}============================ STEP 1 ================================${normal}"
echo
echo " >>> Check directory variables."
echo " >>> CFG_INVENIO_VIRTUALENV_NAME = $CFG_INVENIO_VIRTUALENV_NAME"
echo " >>> CFG_INVENIO_VIRTUALENVS     = $CFG_INVENIO_VIRTUALENVS"
echo " >>> CFG_INVENIO_PREFIX          = $CFG_INVENIO_PREFIX"
echo " >>> CFG_INVENIO_SRCDIR          = $CFG_INVENIO_SRCDIR"
echo " >>> CFG_INVENIO_SRCDIR_ORIG     = $CFG_INVENIO_SRCDIR_ORIG"
echo
check_correct_cfgs CFG_INVENIO_VIRTUALENV_NAME CFG_INVENIO_VIRTUALENVS CFG_INVENIO_PREFIX CFG_INVENIO_SRCDIR CFG_INVENIO_SRCDIR_ORIG
echo
echo -n " >>> Git repo in CFG_INVENIO_SRCDIR_ORIG = $CFG_INVENIO_SRCDIR_ORIG ... "
cd $CFG_INVENIO_SRCDIR_ORIG
git status &>/dev/null && echo '[ok]' || ( echo '[fail]'; exit 1 )
echo

#############################################
# Step 2: Check and create activate-profile #
#############################################
echo " ${bold}============================ STEP 2 ================================${normal}"
echo
echo " >>> Create and activate new profile."
echo " >>> CFG_TMP                     = $CFG_TMP"
echo
echo " >>> Check host variables."
echo " >>> CFG_INVENIO_USER            = $CFG_INVENIO_USER"
echo " >>> CFG_INVENIO_ADMIN           = $CFG_INVENIO_ADMIN"
echo " >>> CFG_INVENIO_HOSTNAME        = $CFG_INVENIO_HOSTNAME"
echo " >>> CFG_INVENIO_DOMAINNAME      = $CFG_INVENIO_DOMAINNAME"
echo " >>> CFG_INVENIO_PORT_HTTP       = $CFG_INVENIO_PORT_HTTP"
echo " >>> CFG_INVENIO_PORT_HTTPS      = $CFG_INVENIO_PORT_HTTPS"
echo
check_correct_cfgs CFG_INVENIO_USER CFG_INVENIO_ADMIN CFG_INVENIO_HOSTNAME CFG_INVENIO_DOMAINNAME CFG_INVENIO_PORT_HTTP CFG_INVENIO_PORT_HTTPS
echo
echo " >>> Check database variables."
echo " >>> CFG_INVENIO_HOST    = $CFG_INVENIO_HOST [localhost]"
echo " >>> CFG_INVENIO_DATABASE_NAME   = $CFG_INVENIO_DATABASE_NAME"
echo " >>> CFG_INVENIO_DATABASE_USER   = $CFG_INVENIO_DATABASE_USER"
echo " >>> CFG_INVENIO_DATABASE_PASS   = $CFG_INVENIO_DATABASE_PASS"
echo
check_correct_cfgs CFG_INVENIO_HOST CFG_INVENIO_DATABASE_NAME CFG_INVENIO_DATABASE_USER CFG_INVENIO_DATABASE_PASS

mkdir -p $CFG_TMP
cat > ${CFG_TMP}/activate-profile <<EOF
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache
export PYVER=`python -c "import sys;print '%s.%s' % (sys.version_info[0],sys.version_info[1])"`
export CFG_INVENIO_SRCDIR=${CFG_INVENIO_SRCDIR}
export CFG_INVENIO_PREFIX=${CFG_INVENIO_PREFIX}
export CFG_INVENIO_USER=${CFG_INVENIO_USER:=www-data}
export CFG_INVENIO_ADMIN=${CFG_INVENIO_ADMIN:=info@invenio-software.org}
export CFG_INVENIO_HOSTNAME=${CFG_INVENIO_HOSTNAME:=`hostname -s`}
export CFG_INVENIO_DOMAINNAME=${CFG_INVENIO_DOMAINNAME:=`domainname`}
export CFG_INVENIO_PORT_HTTP=${CFG_INVENIO_PORT_HTTP:=80}
export CFG_INVENIO_PORT_HTTPS=${CFG_INVENIO_PORT_HTTPS:=443}

# Database
export CFG_INVENIO_DATABASE_HOST=localhost
export CFG_INVENIO_DATABASE_NAME=$CFG_INVENIO_DATABASE_NAME
export CFG_INVENIO_DATABASE_USER=$CFG_INVENIO_DATABASE_USER
export CFG_INVENIO_DATABASE_PASS='$CFG_INVENIO_DATABASE_PASS'

# Debugging mail server
export CFG_MISCUTIL_SMTP_HOST=127.0.0.1
export CFG_MISCUTIL_SMTP_PORT=1025

# Configuration files (these files are created below)
export INVENIO_LOCAL=${CFG_TMP}/invenio-local.conf
export REQUIREMENTS=${CFG_INVENIO_SRCDIR}/requirements.txt
export REQUIREMENTS_EXTRAS=${CFG_INVENIO_SRCDIR}/requirements-extras.txt
export REQUIREMENTS_FLASK=${CFG_INVENIO_SRCDIR}/requirements-flask.txt
export REQUIREMENTS_FLASK_EXT=${CFG_INVENIO_SRCDIR}/requirements-flask-ext.txt

alias mi="${CFG_INVENIO_PREFIX}/bin/invenio-make-install"
alias kw="${CFG_INVENIO_PREFIX}/bin/invenio-check-kwalitee --check-some"

if [ -e ${CFG_INVENIO_PREFIX}/etc/bash_completion.d/inveniocfg ];
then
  . ${CFG_INVENIO_PREFIX}/etc/bash_completion.d/inveniocfg
fi

(which register-python-argcomplete >/dev/null) && eval "$(register-python-argcomplete 'inveniomanage')"
EOF

# Run it
. ${CFG_TMP}/activate-profile

echo " >>> PYVER = $PYVER"
echo " >>> CFG_INVENIO_PREFIX = $CFG_INVENIO_PREFIX"
echo

cat ${CFG_TMP}/activate-profile

[ $CONFIRM -eq 0 ] && ( echo "Press enter to continue ... (exit ^c)"; read )

#####################################
# Step 3:  Create invenio-local.conf#
#####################################
echo " ${bold}============================ STEP 3 ================================${normal}"
echo
echo " >>> Create config file."
echo

#
# invenio-local.conf
#
mkdir -p `dirname $INVENIO_LOCAL`
cat > $INVENIO_LOCAL <<EOF
[Invenio]
CFG_BIBSCHED_PROCESS_USER = $CFG_INVENIO_USER
CFG_DATABASE_HOST = $CFG_INVENIO_DATABASE_HOST
CFG_DATABASE_PORT = 3306
CFG_DATABASE_NAME = $CFG_INVENIO_DATABASE_NAME
CFG_DATABASE_USER = $CFG_INVENIO_DATABASE_USER
CFG_DATABASE_PASS = $CFG_INVENIO_DATABASE_PASS
CFG_SITE_URL = http://$CFG_INVENIO_HOSTNAME:$CFG_INVENIO_PORT_HTTP

# For production environments, change http to https in next line
CFG_SITE_SECURE_URL = http://$CFG_INVENIO_HOSTNAME:$CFG_INVENIO_PORT_HTTPS
CFG_SITE_ADMIN_EMAIL = $CFG_INVENIO_ADMIN
CFG_SITE_SUPPORT_EMAIL = $CFG_INVENIO_ADMIN
CFG_SITE_NAME = Atlantis Fictive Institute of Science
CFG_SITE_NAME_INTL_fr = Atlantis Institut des Sciences Fictives

# Next two is only for runnning a debugging mail server
CFG_MISCUTIL_SMTP_HOST = $CFG_MISCUTIL_SMTP_HOST
CFG_MISCUTIL_SMTP_PORT = $CFG_MISCUTIL_SMTP_PORT
CFG_DEVEL_SITE = 0
CFG_SITE_EMERGENCY_EMAIL_ADDRESSES = {'*': '$CFG_INVENIO_ADMIN'}

# Use memory cache for full site functionality.
CFG_FLASK_CACHE_TYPE = redis

# Use websearch cache
CFG_WEBSEARCH_SEARCH_CACHE_SIZE = 1
CFG_WEBSEARCH_SEARCH_CACHE_TIMEOUT = 600

# Enable serving static files
CFG_FLASK_SERVE_STATIC_FILES = 1
CFG_DEVEL_TEST_DATABASE_ENGINES = {'SQLite': {'engine': 'sqlite+pysqlite', 'username': None, 'password': None, 'host': None, 'database': None}}

# Developer tools
# Uncomment and update config to use them
#CFG_DEVEL_TOOLS = debug-toolbar, werkzeug-debugger, profiler, no-https-redirect, remote-debugger, assets-debug
EOF

echo

[ $CONFIRM -eq 0 ] && ( echo "Press enter to continue ... (exit ^c)"; read )

##############################################
# Step 4: Creation and activation virtualenv #
##############################################
echo " ${bold}============================ STEP 4 ================================${normal}"
echo
echo " >>> Using CFG_INVENIO_PREFIX = $CFG_INVENIO_PREFIX"
echo

. `which virtualenvwrapper.sh`

# Create virtual environment
echo " >>> Creating virtualenv $CFG_INVENIO_VIRTUALENV_NAME ... "
mkvirtualenv $CFG_INVENIO_VIRTUALENV_NAME

# Activate it
cat ${CFG_TMP}/activate-profile >> $CFG_INVENIO_PREFIX/bin/activate

#. `basename $CFG_INVENIO_PREFIX`/bin/activate
workon $CFG_INVENIO_VIRTUALENV_NAME

echo

[ $CONFIRM -eq 0 ] && ( echo "Press enter to continue ... (exit ^c)"; read )

######################################
# Step 5: installing developer tools #
######################################
echo " ${bold}============================ STEP 5 ================================${normal}"
echo
echo " >>> Installing Invenio Devscripts."
echo " >>> $CFG_INVENIO_PREFIX"

cdvirtualenv

echo " >>> PWD `pwd`"
echo " >>> $ . `basename $CFG_INVENIO_PREFIX`/bin/activate"
echo

git clone https://github.com/tiborsimko/invenio-devscripts.git
mv invenio-devscripts/* bin/
rm -Rf invenio-devscripts

echo " >>> Installing .vimrc ..."

#FIXME
cat > .vimrc <<EOF
EOF

echo " >>> Installing git-new-workdir ..."

wget -O bin/git-new-workdir "http://repo.or.cz/w/git.git/blob_plain/HEAD:/contrib/workdir/git-new-workdir"
chmod +x bin/git-new-workdir
echo " >>> Creating new workdir ..."
echo " >>> CFG_INVENIO_SRCDIR_ORIG = $CFG_INVENIO_SRCDIR_ORIG"
echo " >>> CFG_INVENIO_SRCDIR = $CFG_INVENIO_SRCDIR"
echo

git-new-workdir $CFG_INVENIO_SRCDIR_ORIG $CFG_INVENIO_SRCDIR

echo

[ $CONFIRM -eq 0 ] && ( echo "Press enter to continue ... (exit ^c)"; read )

################################
# Step 6: Install requirements #
################################
echo " ${bold}============================ STEP 6 ================================${normal}"
echo

echo " >>> Using REQUIREMENTS = $REQUIREMENTS"
echo " >>> Using REQUIREMENTS_EXTRAS = $REQUIREMENTS_EXTRAS"
echo " >>> Using REQUIREMENTS_FLASK = $REQUIREMENTS_FLASK"
echo " >>> Using REQUIREMENTS_FLASK_EXT = $REQUIREMENTS_FLASK_EXT"
echo

# FIXME - hack for master branch (without requirements files)
if [ -f $REQUIREMENTS ]; then
	echo " >>> Instaling NEXT branch"
	branch='next'
	pip install -r $REQUIREMENTS
	pip install -r $REQUIREMENTS_EXTRAS
	pip install -r $REQUIREMENTS_FLASK
	pip install -r $REQUIREMENTS_FLASK_EXT
else
	echo " >>> Instaling MASTER branch"
	branch='master'
	#REQUIREMENTS
	pip install MySQL-python==1.2.4 rdflib==2.4.2 reportlab==2.5 'python-dateutil<=1.9999' \
			python-magic==0.4.2 http://www.reportlab.com/ftp/pyRXP-1.16-daily-unix.tar.gz \
			http://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2.tar.gz \
			numpy==1.7.0 lxml==3.1.2 mechanize==0.2.5 python-Levenshtein==0.10.2 pyPdf==1.13 PyStemmer==1.3.0 \
			https://py-editdist.googlecode.com/files/py-editdist-0.3.tar.gz feedparser==5.1.3 \
			BeautifulSoup==3.2.1 beautifulsoup4==4.1.3 python-twitter==0.8.7 celery==3.0.17 \
			msgpack-python==0.3.0 pyparsing==1.5.6 requests==1.2.1 \
			git+git://github.com/romanchyla/workflow.git@e41299579501704b1486c72cc2509a9f82e63ea6
	#REQUIREMENTS_EXTRA
	pip install gnuplot-py==1.8 invenio-devserver==0.1 pylint pep8 selenium winpdb mechanize mock \
			http://sourceforge.net/projects/pychecker/files/pychecker/0.8.19/pychecker-0.8.19.tar.gz/download
fi

pip install ipython nose ipdb virtualenvwrapper

# Open Office
# FIXME
#cp  `find /usr/ -name uno.py 2>/dev/null | head -n 1` $VIRTUAL_ENV/lib/python$PYVER/site-packages/
#cp ` find /usr/ -name unohelper.py 2>/dev/null | head -n 1` $VIRTUAL_ENV/lib/python$PYVER/site-packages/

echo
[ $CONFIRM -eq 0 ] && ( echo "Press enter to continue ... (exit ^c)"; read )

###########################
# Step 7: configure MySQL #
###########################
echo " ${bold}============================ STEP 7 ================================${normal}"
# Set the MySQL user which have access to create the database and user.
echo
echo " >>> Installing MySQL Database ... "
echo " >>> DROP DATABASE IF EXISTS $CFG_INVENIO_DATABASE_NAME"
echo " >>> CREATE DATABASE IF NOT EXISTS $CFG_INVENIO_DATABASE_NAME DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci"
echo " >>> GRANT ALL PRIVILEGES ON $CFG_INVENIO_DATABASE_NAME.* TO $CFG_INVENIO_DATABASE_USER@localhost IDENTIFIED BY '$CFG_INVENIO_DATABASE_PASS'"
echo

# Create database
mysql -u $MYSQL_ADMIN_USER --password=$MYSQL_ADMIN_PASS -e "DROP DATABASE IF EXISTS $CFG_INVENIO_DATABASE_NAME"
mysql -u $MYSQL_ADMIN_USER --password=$MYSQL_ADMIN_PASS -h $CFG_INVENIO_DATABASE_HOST -e "CREATE DATABASE IF NOT EXISTS $CFG_INVENIO_DATABASE_NAME DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci"
# Create user and grant access to database.
mysql -u $MYSQL_ADMIN_USER --password=$MYSQL_ADMIN_PASS -h $CFG_INVENIO_DATABASE_HOST -e "GRANT ALL PRIVILEGES ON $CFG_INVENIO_DATABASE_NAME.* TO $CFG_INVENIO_DATABASE_USER@localhost IDENTIFIED BY '$CFG_INVENIO_DATABASE_PASS'"
mysqladmin -u $MYSQL_ADMIN_USER --password=$MYSQL_ADMIN_PASS flush-privileges

## pgrep mysql | xargs kill -9

$CFG_INVENIO_MYSQLCTL restart

echo
[ $CONFIRM -eq 0 ] && ( echo "Press enter to continue ... (exit ^c)"; read )

#############################
# Step 8: configure Invenio #
#############################
echo " ${bold}============================ STEP 8 ================================${normal}"
echo
echo " >>> Pre-install configuration ..."
echo " >>> $ aclocal && automake --add-missing && autoconf"
echo " >>> $ ./configure --prefix=$CFG_INVENIO_PREFIX --with-python=$CFG_INVENIO_PREFIX/bin/python"

cd $CFG_INVENIO_SRCDIR
aclocal && automake --add-missing && autoconf

./configure --prefix=$CFG_INVENIO_PREFIX --with-python=$CFG_INVENIO_PREFIX/bin/python
# Make symlink into the virtualenv's Python site-packages.
ln -s $CFG_INVENIO_PREFIX/lib/python/invenio $CFG_INVENIO_PREFIX/lib/python$PYVER/site-packages/invenio

echo
[ $CONFIRM -eq 0 ] && ( echo "Press enter to continue ... (exit ^c)"; read )

###########################
# Step 9: install Invenio #
###########################

echo " ${bold}============================ STEP 9 ================================${normal}"
echo
echo " >>> Installing ..."
echo

cd $CFG_INVENIO_SRCDIR

make
make install

cp $INVENIO_LOCAL $CFG_INVENIO_PREFIX/etc/invenio-local.conf

inveniocfg --update-all
inveniocfg --update-config-py
inveniomanage config create secret-key
inveniomanage config update
inveniomanage bibfield config load
inveniocfg --update-all
#inveniocfg --create-apache-conf


make install-mathjax-plugin
make install-ckeditor-plugin
make install-pdfa-helper-files
make install-jquery-plugins
make install-bootstrap
make install-hogan-plugin
make install-plupload-plugin

#$MYSQL_CMD restart

#mkdir -p $VIRTUAL_ENV/var/tmp/ooffice-tmp-files
#sudo chown -R nobody $VIRTUAL_ENV/var/tmp/ooffice-tmp-files
#sudo chmod -R 755 $VIRTUAL_ENV/var/tmp/ooffice-tmp-files

echo
[ $CONFIRM -eq 0 ] && ( echo "Press enter to continue ... (exit ^c)"; read )

#############################
# Step 10: create demo site #
#############################
echo "${bold} ============================ STEP 10 ================================${normal}"
echo
echo " >>> Create demo site and load records."
echo
if [$branch == 'master']; then
	inveniocfg --create-tables
	inveniocfg --create-demo-site
	inveniocfg --load-demo-records
else
	inveniomanage database create
	inveniomanage demosite create
	inveniomanage demosite populate
	inveniomanage bibfield reset
fi

[ $CONFIRM -eq 0 ] && ( echo "Press enter to continue ... (exit ^c)"; read )

################################################
# Step 10: creating apache configuration files #
################################################
#FIXME: check mac osx odd apache folder configuration
if [ $APACHE -eq 1 ]; then
    echo " ${bold}============================ STEP 11 ================================${normal}"
    echo
    echo " >>> Create Apache configuration files for this site."
    echo
    inveniomanage apache create-config
    echo
    echo " >>> Going to link the files."
    echo
    ## add Invenio web sites:
    sudo ln -s $CFG_INVENIO_PREFIX/etc/apache/invenio-apache-vhost.conf \
        /etc/apache2/sites-available/$CFG_INVENIO_VIRTUALENV_NAME
    sudo ln -s $CFG_INVENIO_PREFIX/etc/apache/invenio-apache-vhost-ssl.conf \
        /etc/apache2/sites-available/$CFG_INVENIO_VIRTUALENV_NAME-ssl
    ## enable Invenio web sites:
    sudo a2ensite $CFG_INVENIO_VIRTUALENV_NAME
    sudo a2ensite $CFG_INVENIO_VIRTUALENV_NAME-ssl
    ## restart Apache:
    $CFG_INVENIO_APACHECTL restart
fi

##########
# Step N #
##########
echo " ${bold}============================ STEP N ================================${normal}"
echo
echo " >>> Having a rest."
echo " >>> Nothing to do here."
echo

# Nothing to do here
[ $CONFIRM -eq 0 ] && ( echo "Press enter to continue ... (exit ^c)"; read )
